// @generated by protobuf-ts 2.9.6 with parameter server_grpc1
// @generated from protobuf file "department.proto" (package "department", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message department.GetAllUsersByDepartmentRequest
 */
export interface GetAllUsersByDepartmentRequest {
}
/**
 * @generated from protobuf message department.Hair
 */
export interface Hair {
    /**
     * @generated from protobuf field: int32 black = 1;
     */
    black: number;
    /**
     * @generated from protobuf field: int32 blond = 2;
     */
    blond: number;
    /**
     * @generated from protobuf field: int32 chestnut = 3;
     */
    chestnut: number;
    /**
     * @generated from protobuf field: int32 brown = 4;
     */
    brown: number;
}
/**
 * @generated from protobuf message department.GetAllUsersByDepartmentResponse
 */
export interface GetAllUsersByDepartmentResponse {
    /**
     * @generated from protobuf field: int32 male = 1;
     */
    male: number; // count male
    /**
     * @generated from protobuf field: int32 female = 2;
     */
    female: number; // count female
    /**
     * @generated from protobuf field: string ageRange = 3;
     */
    ageRange: string; // xx-xx
    /**
     * @generated from protobuf field: department.Hair hair = 4;
     */
    hair?: Hair;
    /**
     * @generated from protobuf field: map<string, string> addressUser = 5;
     */
    addressUser: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAllUsersByDepartmentRequest$Type extends MessageType<GetAllUsersByDepartmentRequest> {
    constructor() {
        super("department.GetAllUsersByDepartmentRequest", []);
    }
    create(value?: PartialMessage<GetAllUsersByDepartmentRequest>): GetAllUsersByDepartmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllUsersByDepartmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllUsersByDepartmentRequest): GetAllUsersByDepartmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllUsersByDepartmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message department.GetAllUsersByDepartmentRequest
 */
export const GetAllUsersByDepartmentRequest = new GetAllUsersByDepartmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Hair$Type extends MessageType<Hair> {
    constructor() {
        super("department.Hair", [
            { no: 1, name: "black", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "blond", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "chestnut", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "brown", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Hair>): Hair {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.black = 0;
        message.blond = 0;
        message.chestnut = 0;
        message.brown = 0;
        if (value !== undefined)
            reflectionMergePartial<Hair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hair): Hair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 black */ 1:
                    message.black = reader.int32();
                    break;
                case /* int32 blond */ 2:
                    message.blond = reader.int32();
                    break;
                case /* int32 chestnut */ 3:
                    message.chestnut = reader.int32();
                    break;
                case /* int32 brown */ 4:
                    message.brown = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Hair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 black = 1; */
        if (message.black !== 0)
            writer.tag(1, WireType.Varint).int32(message.black);
        /* int32 blond = 2; */
        if (message.blond !== 0)
            writer.tag(2, WireType.Varint).int32(message.blond);
        /* int32 chestnut = 3; */
        if (message.chestnut !== 0)
            writer.tag(3, WireType.Varint).int32(message.chestnut);
        /* int32 brown = 4; */
        if (message.brown !== 0)
            writer.tag(4, WireType.Varint).int32(message.brown);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message department.Hair
 */
export const Hair = new Hair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllUsersByDepartmentResponse$Type extends MessageType<GetAllUsersByDepartmentResponse> {
    constructor() {
        super("department.GetAllUsersByDepartmentResponse", [
            { no: 1, name: "male", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "female", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ageRange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hair", kind: "message", T: () => Hair },
            { no: 5, name: "addressUser", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<GetAllUsersByDepartmentResponse>): GetAllUsersByDepartmentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.male = 0;
        message.female = 0;
        message.ageRange = "";
        message.addressUser = {};
        if (value !== undefined)
            reflectionMergePartial<GetAllUsersByDepartmentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllUsersByDepartmentResponse): GetAllUsersByDepartmentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 male */ 1:
                    message.male = reader.int32();
                    break;
                case /* int32 female */ 2:
                    message.female = reader.int32();
                    break;
                case /* string ageRange */ 3:
                    message.ageRange = reader.string();
                    break;
                case /* department.Hair hair */ 4:
                    message.hair = Hair.internalBinaryRead(reader, reader.uint32(), options, message.hair);
                    break;
                case /* map<string, string> addressUser */ 5:
                    this.binaryReadMap5(message.addressUser, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: GetAllUsersByDepartmentResponse["addressUser"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetAllUsersByDepartmentResponse["addressUser"] | undefined, val: GetAllUsersByDepartmentResponse["addressUser"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field department.GetAllUsersByDepartmentResponse.addressUser");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: GetAllUsersByDepartmentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 male = 1; */
        if (message.male !== 0)
            writer.tag(1, WireType.Varint).int32(message.male);
        /* int32 female = 2; */
        if (message.female !== 0)
            writer.tag(2, WireType.Varint).int32(message.female);
        /* string ageRange = 3; */
        if (message.ageRange !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ageRange);
        /* department.Hair hair = 4; */
        if (message.hair)
            Hair.internalBinaryWrite(message.hair, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> addressUser = 5; */
        for (let k of globalThis.Object.keys(message.addressUser))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.addressUser[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message department.GetAllUsersByDepartmentResponse
 */
export const GetAllUsersByDepartmentResponse = new GetAllUsersByDepartmentResponse$Type();
