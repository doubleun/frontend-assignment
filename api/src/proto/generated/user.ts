// @generated by protobuf-ts 2.9.6 with parameter server_grpc1
// @generated from protobuf file "user.proto" (package "user", syntax proto3)
// tslint:disable
import { GetAllUsersByDepartmentResponse } from "./department";
import { GetAllUsersByDepartmentRequest } from "./department";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message user.GetAllUsersRequest
 */
export interface GetAllUsersRequest {
}
/**
 * @generated from protobuf message user.GetAllUsersResponse
 */
export interface GetAllUsersResponse {
    /**
     * @generated from protobuf field: repeated user.GetUserResponse users = 1;
     */
    users: GetUserResponse[];
}
/**
 * @generated from protobuf message user.Coordinates
 */
export interface Coordinates {
    /**
     * @generated from protobuf field: double lat = 1;
     */
    lat: number;
    /**
     * @generated from protobuf field: double lng = 2;
     */
    lng: number;
}
/**
 * @generated from protobuf message user.Address
 */
export interface Address {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: string city = 2;
     */
    city: string;
    /**
     * @generated from protobuf field: string state = 3;
     */
    state: string;
    /**
     * @generated from protobuf field: string stateCode = 4;
     */
    stateCode: string;
    /**
     * @generated from protobuf field: string postalCode = 5;
     */
    postalCode: string;
    /**
     * @generated from protobuf field: user.Coordinates coordinates = 6;
     */
    coordinates?: Coordinates;
    /**
     * @generated from protobuf field: string country = 7;
     */
    country: string;
}
/**
 * @generated from protobuf message user.Hair
 */
export interface Hair {
    /**
     * @generated from protobuf field: string color = 1;
     */
    color: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
}
/**
 * @generated from protobuf message user.Bank
 */
export interface Bank {
    /**
     * @generated from protobuf field: string cardExpire = 1;
     */
    cardExpire: string;
    /**
     * @generated from protobuf field: string cardNumber = 2;
     */
    cardNumber: string;
    /**
     * @generated from protobuf field: string cardType = 3;
     */
    cardType: string;
    /**
     * @generated from protobuf field: string currency = 4;
     */
    currency: string;
    /**
     * @generated from protobuf field: string iban = 5;
     */
    iban: string;
}
/**
 * @generated from protobuf message user.Company
 */
export interface Company {
    /**
     * @generated from protobuf field: string department = 1;
     */
    department: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: user.Address address = 4;
     */
    address?: Address;
}
/**
 * @generated from protobuf message user.Crypto
 */
export interface Crypto {
    /**
     * @generated from protobuf field: string coin = 1;
     */
    coin: string;
    /**
     * @generated from protobuf field: string wallet = 2;
     */
    wallet: string;
    /**
     * @generated from protobuf field: string network = 3;
     */
    network: string;
}
/**
 * Top‚Äêlevel user message
 *
 * @generated from protobuf message user.GetUserResponse
 */
export interface GetUserResponse {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string firstName = 2;
     */
    firstName: string;
    /**
     * @generated from protobuf field: string lastName = 3;
     */
    lastName: string;
    /**
     * @generated from protobuf field: string maidenName = 4;
     */
    maidenName: string;
    /**
     * @generated from protobuf field: int32 age = 5;
     */
    age: number;
    /**
     * @generated from protobuf field: string gender = 6;
     */
    gender: string;
    /**
     * @generated from protobuf field: string email = 7;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 8;
     */
    phone: string;
    /**
     * @generated from protobuf field: string username = 9;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 10;
     */
    password: string;
    /**
     * @generated from protobuf field: string birthDate = 11;
     */
    birthDate: string; // ISO date as string
    /**
     * @generated from protobuf field: string image = 12;
     */
    image: string;
    /**
     * @generated from protobuf field: string bloodGroup = 13;
     */
    bloodGroup: string;
    /**
     * @generated from protobuf field: double height = 14;
     */
    height: number;
    /**
     * @generated from protobuf field: double weight = 15;
     */
    weight: number;
    /**
     * @generated from protobuf field: string eyeColor = 16;
     */
    eyeColor: string;
    /**
     * @generated from protobuf field: user.Hair hair = 17;
     */
    hair?: Hair;
    /**
     * @generated from protobuf field: string ip = 18;
     */
    ip: string;
    /**
     * @generated from protobuf field: user.Address address = 19;
     */
    address?: Address;
    /**
     * @generated from protobuf field: string macAddress = 20;
     */
    macAddress: string;
    /**
     * @generated from protobuf field: string university = 21;
     */
    university: string;
    /**
     * @generated from protobuf field: user.Bank bank = 22;
     */
    bank?: Bank;
    /**
     * @generated from protobuf field: user.Company company = 23;
     */
    company?: Company;
    /**
     * @generated from protobuf field: string ein = 24;
     */
    ein: string;
    /**
     * @generated from protobuf field: string ssn = 25;
     */
    ssn: string;
    /**
     * @generated from protobuf field: string userAgent = 26;
     */
    userAgent: string;
    /**
     * @generated from protobuf field: user.Crypto crypto = 27;
     */
    crypto?: Crypto;
    /**
     * @generated from protobuf field: string role = 28;
     */
    role: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAllUsersRequest$Type extends MessageType<GetAllUsersRequest> {
    constructor() {
        super("user.GetAllUsersRequest", []);
    }
    create(value?: PartialMessage<GetAllUsersRequest>): GetAllUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllUsersRequest): GetAllUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.GetAllUsersRequest
 */
export const GetAllUsersRequest = new GetAllUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllUsersResponse$Type extends MessageType<GetAllUsersResponse> {
    constructor() {
        super("user.GetAllUsersResponse", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetUserResponse }
        ]);
    }
    create(value?: PartialMessage<GetAllUsersResponse>): GetAllUsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllUsersResponse): GetAllUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated user.GetUserResponse users */ 1:
                    message.users.push(GetUserResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated user.GetUserResponse users = 1; */
        for (let i = 0; i < message.users.length; i++)
            GetUserResponse.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.GetAllUsersResponse
 */
export const GetAllUsersResponse = new GetAllUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Coordinates$Type extends MessageType<Coordinates> {
    constructor() {
        super("user.Coordinates", [
            { no: 1, name: "lat", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "lng", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Coordinates>): Coordinates {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lat = 0;
        message.lng = 0;
        if (value !== undefined)
            reflectionMergePartial<Coordinates>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Coordinates): Coordinates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double lat */ 1:
                    message.lat = reader.double();
                    break;
                case /* double lng */ 2:
                    message.lng = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Coordinates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double lat = 1; */
        if (message.lat !== 0)
            writer.tag(1, WireType.Bit64).double(message.lat);
        /* double lng = 2; */
        if (message.lng !== 0)
            writer.tag(2, WireType.Bit64).double(message.lng);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Coordinates
 */
export const Coordinates = new Coordinates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Address$Type extends MessageType<Address> {
    constructor() {
        super("user.Address", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "stateCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "postalCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "coordinates", kind: "message", T: () => Coordinates },
            { no: 7, name: "country", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Address>): Address {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.address = "";
        message.city = "";
        message.state = "";
        message.stateCode = "";
        message.postalCode = "";
        message.country = "";
        if (value !== undefined)
            reflectionMergePartial<Address>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Address): Address {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string city */ 2:
                    message.city = reader.string();
                    break;
                case /* string state */ 3:
                    message.state = reader.string();
                    break;
                case /* string stateCode */ 4:
                    message.stateCode = reader.string();
                    break;
                case /* string postalCode */ 5:
                    message.postalCode = reader.string();
                    break;
                case /* user.Coordinates coordinates */ 6:
                    message.coordinates = Coordinates.internalBinaryRead(reader, reader.uint32(), options, message.coordinates);
                    break;
                case /* string country */ 7:
                    message.country = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Address, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string city = 2; */
        if (message.city !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.city);
        /* string state = 3; */
        if (message.state !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.state);
        /* string stateCode = 4; */
        if (message.stateCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.stateCode);
        /* string postalCode = 5; */
        if (message.postalCode !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.postalCode);
        /* user.Coordinates coordinates = 6; */
        if (message.coordinates)
            Coordinates.internalBinaryWrite(message.coordinates, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string country = 7; */
        if (message.country !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.country);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Address
 */
export const Address = new Address$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Hair$Type extends MessageType<Hair> {
    constructor() {
        super("user.Hair", [
            { no: 1, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Hair>): Hair {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.color = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<Hair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hair): Hair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string color */ 1:
                    message.color = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Hair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string color = 1; */
        if (message.color !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.color);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Hair
 */
export const Hair = new Hair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bank$Type extends MessageType<Bank> {
    constructor() {
        super("user.Bank", [
            { no: 1, name: "cardExpire", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cardNumber", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cardType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "iban", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Bank>): Bank {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cardExpire = "";
        message.cardNumber = "";
        message.cardType = "";
        message.currency = "";
        message.iban = "";
        if (value !== undefined)
            reflectionMergePartial<Bank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bank): Bank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cardExpire */ 1:
                    message.cardExpire = reader.string();
                    break;
                case /* string cardNumber */ 2:
                    message.cardNumber = reader.string();
                    break;
                case /* string cardType */ 3:
                    message.cardType = reader.string();
                    break;
                case /* string currency */ 4:
                    message.currency = reader.string();
                    break;
                case /* string iban */ 5:
                    message.iban = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cardExpire = 1; */
        if (message.cardExpire !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cardExpire);
        /* string cardNumber = 2; */
        if (message.cardNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cardNumber);
        /* string cardType = 3; */
        if (message.cardType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cardType);
        /* string currency = 4; */
        if (message.currency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.currency);
        /* string iban = 5; */
        if (message.iban !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.iban);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Bank
 */
export const Bank = new Bank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Company$Type extends MessageType<Company> {
    constructor() {
        super("user.Company", [
            { no: 1, name: "department", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "address", kind: "message", T: () => Address }
        ]);
    }
    create(value?: PartialMessage<Company>): Company {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.department = "";
        message.name = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<Company>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Company): Company {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string department */ 1:
                    message.department = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* user.Address address */ 4:
                    message.address = Address.internalBinaryRead(reader, reader.uint32(), options, message.address);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Company, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string department = 1; */
        if (message.department !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.department);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* user.Address address = 4; */
        if (message.address)
            Address.internalBinaryWrite(message.address, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Company
 */
export const Company = new Company$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Crypto$Type extends MessageType<Crypto> {
    constructor() {
        super("user.Crypto", [
            { no: 1, name: "coin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "wallet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "network", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Crypto>): Crypto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.coin = "";
        message.wallet = "";
        message.network = "";
        if (value !== undefined)
            reflectionMergePartial<Crypto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Crypto): Crypto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string coin */ 1:
                    message.coin = reader.string();
                    break;
                case /* string wallet */ 2:
                    message.wallet = reader.string();
                    break;
                case /* string network */ 3:
                    message.network = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Crypto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string coin = 1; */
        if (message.coin !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.coin);
        /* string wallet = 2; */
        if (message.wallet !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.wallet);
        /* string network = 3; */
        if (message.network !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.network);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.Crypto
 */
export const Crypto = new Crypto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserResponse$Type extends MessageType<GetUserResponse> {
    constructor() {
        super("user.GetUserResponse", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "firstName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lastName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "maidenName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "age", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "gender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "birthDate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "bloodGroup", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "height", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 15, name: "weight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "eyeColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "hair", kind: "message", T: () => Hair },
            { no: 18, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "address", kind: "message", T: () => Address },
            { no: 20, name: "macAddress", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "university", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "bank", kind: "message", T: () => Bank },
            { no: 23, name: "company", kind: "message", T: () => Company },
            { no: 24, name: "ein", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "ssn", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "userAgent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "crypto", kind: "message", T: () => Crypto },
            { no: 28, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserResponse>): GetUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.firstName = "";
        message.lastName = "";
        message.maidenName = "";
        message.age = 0;
        message.gender = "";
        message.email = "";
        message.phone = "";
        message.username = "";
        message.password = "";
        message.birthDate = "";
        message.image = "";
        message.bloodGroup = "";
        message.height = 0;
        message.weight = 0;
        message.eyeColor = "";
        message.ip = "";
        message.macAddress = "";
        message.university = "";
        message.ein = "";
        message.ssn = "";
        message.userAgent = "";
        message.role = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserResponse): GetUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string firstName */ 2:
                    message.firstName = reader.string();
                    break;
                case /* string lastName */ 3:
                    message.lastName = reader.string();
                    break;
                case /* string maidenName */ 4:
                    message.maidenName = reader.string();
                    break;
                case /* int32 age */ 5:
                    message.age = reader.int32();
                    break;
                case /* string gender */ 6:
                    message.gender = reader.string();
                    break;
                case /* string email */ 7:
                    message.email = reader.string();
                    break;
                case /* string phone */ 8:
                    message.phone = reader.string();
                    break;
                case /* string username */ 9:
                    message.username = reader.string();
                    break;
                case /* string password */ 10:
                    message.password = reader.string();
                    break;
                case /* string birthDate */ 11:
                    message.birthDate = reader.string();
                    break;
                case /* string image */ 12:
                    message.image = reader.string();
                    break;
                case /* string bloodGroup */ 13:
                    message.bloodGroup = reader.string();
                    break;
                case /* double height */ 14:
                    message.height = reader.double();
                    break;
                case /* double weight */ 15:
                    message.weight = reader.double();
                    break;
                case /* string eyeColor */ 16:
                    message.eyeColor = reader.string();
                    break;
                case /* user.Hair hair */ 17:
                    message.hair = Hair.internalBinaryRead(reader, reader.uint32(), options, message.hair);
                    break;
                case /* string ip */ 18:
                    message.ip = reader.string();
                    break;
                case /* user.Address address */ 19:
                    message.address = Address.internalBinaryRead(reader, reader.uint32(), options, message.address);
                    break;
                case /* string macAddress */ 20:
                    message.macAddress = reader.string();
                    break;
                case /* string university */ 21:
                    message.university = reader.string();
                    break;
                case /* user.Bank bank */ 22:
                    message.bank = Bank.internalBinaryRead(reader, reader.uint32(), options, message.bank);
                    break;
                case /* user.Company company */ 23:
                    message.company = Company.internalBinaryRead(reader, reader.uint32(), options, message.company);
                    break;
                case /* string ein */ 24:
                    message.ein = reader.string();
                    break;
                case /* string ssn */ 25:
                    message.ssn = reader.string();
                    break;
                case /* string userAgent */ 26:
                    message.userAgent = reader.string();
                    break;
                case /* user.Crypto crypto */ 27:
                    message.crypto = Crypto.internalBinaryRead(reader, reader.uint32(), options, message.crypto);
                    break;
                case /* string role */ 28:
                    message.role = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string firstName = 2; */
        if (message.firstName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.firstName);
        /* string lastName = 3; */
        if (message.lastName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastName);
        /* string maidenName = 4; */
        if (message.maidenName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.maidenName);
        /* int32 age = 5; */
        if (message.age !== 0)
            writer.tag(5, WireType.Varint).int32(message.age);
        /* string gender = 6; */
        if (message.gender !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.gender);
        /* string email = 7; */
        if (message.email !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.email);
        /* string phone = 8; */
        if (message.phone !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.phone);
        /* string username = 9; */
        if (message.username !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.username);
        /* string password = 10; */
        if (message.password !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.password);
        /* string birthDate = 11; */
        if (message.birthDate !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.birthDate);
        /* string image = 12; */
        if (message.image !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.image);
        /* string bloodGroup = 13; */
        if (message.bloodGroup !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.bloodGroup);
        /* double height = 14; */
        if (message.height !== 0)
            writer.tag(14, WireType.Bit64).double(message.height);
        /* double weight = 15; */
        if (message.weight !== 0)
            writer.tag(15, WireType.Bit64).double(message.weight);
        /* string eyeColor = 16; */
        if (message.eyeColor !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.eyeColor);
        /* user.Hair hair = 17; */
        if (message.hair)
            Hair.internalBinaryWrite(message.hair, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* string ip = 18; */
        if (message.ip !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.ip);
        /* user.Address address = 19; */
        if (message.address)
            Address.internalBinaryWrite(message.address, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* string macAddress = 20; */
        if (message.macAddress !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.macAddress);
        /* string university = 21; */
        if (message.university !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.university);
        /* user.Bank bank = 22; */
        if (message.bank)
            Bank.internalBinaryWrite(message.bank, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* user.Company company = 23; */
        if (message.company)
            Company.internalBinaryWrite(message.company, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* string ein = 24; */
        if (message.ein !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.ein);
        /* string ssn = 25; */
        if (message.ssn !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.ssn);
        /* string userAgent = 26; */
        if (message.userAgent !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.userAgent);
        /* user.Crypto crypto = 27; */
        if (message.crypto)
            Crypto.internalBinaryWrite(message.crypto, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* string role = 28; */
        if (message.role !== "")
            writer.tag(28, WireType.LengthDelimited).string(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user.GetUserResponse
 */
export const GetUserResponse = new GetUserResponse$Type();
/**
 * @generated ServiceType for protobuf service user.UserService
 */
export const UserService = new ServiceType("user.UserService", [
    { name: "GetAllUsers", options: {}, I: GetAllUsersRequest, O: GetAllUsersResponse },
    { name: "GetAllUsersByDepartment", options: {}, I: GetAllUsersByDepartmentRequest, O: GetAllUsersByDepartmentResponse }
]);
